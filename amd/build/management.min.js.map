{"version":3,"file":"management.min.js","sources":["../src/management.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Management functions for tiny_elements admin backend.\n *\n * @module     tiny_elements/management\n * @copyright  2024 ISB Bayern\n * @author     Tobias Garske\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {PreviewModal} from 'tiny_elements/previewmodal';\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException, deleteCancelPromise} from 'core/notification';\nimport {call as fetchMany} from 'core/ajax';\nimport {render as renderTemplate} from 'core/templates';\nimport Log from 'core/log';\n\nexport const init = async(params) => {\n\n    // Add listener to import xml files.\n    let importxml = document.getElementById('elements_import');\n    importxml.addEventListener('click', async(e) => {\n        importModal(e);\n    });\n\n    // Add listener for adding a new item.\n    let additem = document.getElementsByClassName('add');\n    additem.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to edit items.\n    let edititems = document.getElementsByClassName('edit');\n    edititems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to delete items.\n    let deleteitems = document.getElementsByClassName('delete');\n    deleteitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            deleteModal(e, element.dataset.id, element.dataset.title, element.dataset.table);\n        });\n    });\n\n    // Add listener to preview items.\n    let previewitems = document.getElementsByClassName('preview-button');\n    previewitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            previewModal(e);\n        });\n    });\n\n    // Add listener to select compcat to show corresponding items.\n    let compcats = document.getElementsByClassName('compcat');\n    compcats.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showItems(e, element.dataset.compcat);\n        });\n    });\n\n    // Add listener to edit licenses of icons.\n    let editlicenses = document.querySelectorAll('.editlicenses');\n    editlicenses.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            editlicensesModal(e, element.dataset.id);\n        });\n    });\n\n    // Add listener to manage component flavor relation.\n    let buttonicons = document.querySelectorAll('.buttonicons');\n    buttonicons.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            compflavorModal(e);\n        });\n    });\n\n    let displaynamesbutton = document.getElementById('elements_displaynames_button');\n    displaynamesbutton.addEventListener('click', async(e) => {\n        displaynamesModal(e);\n    });\n\n    let displaynamesflavorbutton = document.getElementById('elements_displaynames_flavor_button');\n    displaynamesflavorbutton.addEventListener('click', async(e) => {\n        displaynamesFlavorModal(e);\n    });\n\n    let displaynamesvariantbutton = document.getElementById('elements_displaynames_variant_button');\n    displaynamesvariantbutton.addEventListener('click', async(e) => {\n        displaynamesVariantModal(e);\n    });\n\n    // Add listener to duplicate items.\n    let duplicateitems = document.getElementsByClassName('duplicate');\n    duplicateitems.forEach(element => {\n        element.addEventListener('click', async() => {\n            duplicateItem(element.dataset.id, element.dataset.table).always(() => reload());\n        });\n    });\n\n    // Add image and text to item setting click area.\n    let enlargeItems = document.querySelectorAll(\n        '.flavor .card-body > .clickingextended, .component .card-body > .clickingextended, .variant .card-body > .clickingextended'\n    );\n    enlargeItems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            let item = e.target.closest('.item');\n            item.querySelector('a.edit').click();\n        });\n    });\n\n    // After submitting a new item, reset active compcat.\n    if (params.compcatactive) {\n        let compcat = document.querySelector('.compcat[data-compcat=\"' + params.compcatactive + '\"]');\n        if (compcat) {\n            showItems(false, params.compcatactive);\n            compcat.classList.add('active');\n        }\n    }\n};\n\n/**\n * Show dynamic form to add/edit a source.\n * @param {*} event\n * @param {*} id\n * @param {*} table\n */\nconst showModal = async(event, id, table) => {\n    event.preventDefault();\n    let title;\n    if (id == 0) {\n        title = getString('additem', 'tiny_elements');\n    } else {\n        title = getString('edititem', 'tiny_elements');\n    }\n\n    const modalForm = new ModalForm({\n        // Set formclass, depending on component.\n        formClass: \"tiny_elements\\\\form\\\\management_\" + table + \"_form\",\n        args: {\n            id: id,\n            compcat: getActiveCompcatId(),\n            categoryname: getActiveCompcatName(),\n        },\n        modalConfig: {title: title},\n        returnFocus: event.target,\n    });\n    // Conditional reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => reload());\n\n    await modalForm.show();\n};\n\n/**\n * Show modal to preview css version.\n * @param {*} event\n */\nconst previewModal = async(event) => {\n    event.preventDefault();\n    let preview = event.target.closest(\".preview-button\");\n    const modal = await PreviewModal.create({\n        templateContext: {\n            component: preview.dataset.component,\n            flavors: preview.dataset.flavors.trim().split(\" \"),\n            config: M.cfg,\n        },\n    });\n    await modal.show();\n};\n\n/**\n * Show dynamic form to import xml backups.\n * @param {*} event\n */\nconst importModal = async(event) => {\n    event.preventDefault();\n    let title = getString('import', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_elements\\\\form\\\\management_import_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, importModalSubmitted);\n\n    await modalForm.show();\n};\n\n/**\n * Process import form submit.\n * @param {*} event\n */\nconst importModalSubmitted = async(event) => {\n    // Reload page after submit.\n    if (event.detail.update) {\n        location.reload();\n    } else {\n        event.stopPropagation();\n        renderTemplate('tiny_elements/management_import_form_result', event.detail).then(async(html) => {\n            await Notification.alert(\n                getString('import_simulation', 'tiny_elements'),\n                html,\n                getString('close', 'tiny_elements')\n            );\n            return true;\n        }).catch((error) => {\n            displayException(error);\n        });\n    }\n};\n\n/**\n * Load modal to edit icon urls.\n * @param {*} event\n */\nconst compflavorModal = async(event) => {\n    event.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n    const target = event.target.closest('.buttonicons');\n    const component = target.dataset.component ?? '';\n    const flavor = target.dataset.flavor ?? '';\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_elements\\\\form\\\\management_comp_flavor_form\",\n        args: {\n            component: component,\n            flavor: flavor,\n        },\n        modalConfig: {title: title},\n    });\n\n    await modalForm.show();\n};\n\n/**\n * Load modal to edit licenses of icons.\n * @param {*} e\n * @param {*} id\n */\nfunction editlicensesModal(e, id) {\n    e.preventDefault();\n    let title = getString('editlicenses', 'tiny_elements');\n    const modalForm = new ModalForm({\n        formClass: \"tiny_elements\\\\form\\\\management_editlicense_form\",\n        args: {\n            id: id,\n        },\n        modalConfig: {title: title},\n    });\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} event\n * @returns {void}\n */\nconst displaynamesModal = async(event) => {\n    event.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    await modalForm.show();\n};\n\n/**\n * Load modal to edit displaynames.\n * @param {*} event\n * @returns {void}\n */\nconst displaynamesFlavorModal = async(event) => {\n    event.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_flavors_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    await modalForm.show();\n};\n\n/**\n * Load modal to edit displaynames.\n * @param {*} event\n * @returns {void}\n */\nconst displaynamesVariantModal = async(event) => {\n    event.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_variants_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    await modalForm.show();\n};\n\n/**\n * Show dynamic form to delete a source.\n * @param {*} event\n * @param {*} id\n * @param {*} title\n * @param {*} table\n */\nconst deleteModal = (event, id, title, table) => {\n    event.preventDefault();\n\n    deleteCancelPromise(\n        getString('delete', 'tiny_elements', title),\n        getString('deletewarning', 'tiny_elements'),\n    ).then(async() => {\n        if (id !== 0) {\n            try {\n                const deleted = await deleteItem(id, table);\n                if (deleted) {\n                    const link = document.querySelector('[data-table=\"' + table + '\"][data-id=\"' + id + '\"]');\n                    if (link) {\n                        const card = link.closest(\".item\");\n                        card.remove();\n                    }\n                }\n            } catch (error) {\n                displayException(error);\n            }\n        }\n        return;\n    }).catch((err) => {\n        Log.error(err.message);\n        return;\n    });\n};\n\n/**\n * Delete elements items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const deleteItem = (\n    id,\n    table,\n) => fetchMany(\n    [{\n        methodname: 'tiny_elements_delete_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n\n/**\n * Show items after clicking a compcat.\n * @param {*} event\n * @param {*} compcat\n */\nconst showItems = (event, compcat) => {\n    // But first hide all items.\n    let itemsHide = document.querySelectorAll('.flavor, .component, .variant');\n    itemsHide.forEach(element => {\n        element.classList.add('hidden');\n    });\n\n    // Show component and variants with compcat name and read the flavors.\n    let itemsShow = document.querySelectorAll('[data-categoryname=\"' + compcat + '\"]');\n    let usedFlavors = [];\n    itemsShow.forEach(element => {\n        element.classList.remove('hidden');\n        // Get all flavors to show if on compcat element.\n        if (typeof element.dataset.flavors !== 'undefined') {\n            let flavors = element.dataset.flavors.split(' ');\n            for (let value of flavors) {\n                if (!usedFlavors.includes(value) && value.length != 0) {\n                    usedFlavors.push(value);\n                }\n            }\n        }\n    });\n\n    // Show the flavors.\n    let flavorstring = usedFlavors.map(item => `.${item}`).join(', ');\n    if (flavorstring.length) {\n        let flavorsShow = document.querySelectorAll(flavorstring);\n        flavorsShow.forEach(element => {\n            element.classList.remove('hidden');\n        });\n    }\n\n    // Show add buttons.\n    let addsShow = document.getElementsByClassName('addcontainer');\n    addsShow.forEach(element => {\n        element.classList.remove('hidden');\n    });\n\n    // Unmark all and mark clicked compcat.\n    if (event) {\n        let items = document.getElementsByClassName('compcat');\n        items.forEach(element => {\n            element.classList.remove('active');\n        });\n        let item = event.target.closest('.compcat');\n        item.classList.add('active');\n    }\n\n    // Special case, unassigned items, show all items without connection to compcat.\n    if (compcat == 'found-items') {\n        let found = document.querySelector('.compcat[data-compcat=\"found-items\"]');\n        if (found.dataset.loneflavors.length) {\n            let flavorsShow = document.querySelectorAll(found.dataset.loneflavors);\n            flavorsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonevariants.length) {\n            let variantsShow = document.querySelectorAll(found.dataset.lonevariants);\n            variantsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonecomponents.length) {\n            let componentsShow = document.querySelectorAll(found.dataset.lonecomponents);\n            componentsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n    }\n};\n\n/**\n * Reload page with active compcat.\n */\nconst reload = () => {\n    // Reload page with active compcat.\n    const currentUrl = new URL(window.location.href);\n    currentUrl.searchParams.set('compcat', getActiveCompcatName());\n    window.location.href = currentUrl.toString();\n    window.location.reload();\n};\n\n/**\n * Get the current active compcat.\n * @returns string Name of active compcat.\n */\nconst getActiveCompcatName = () => {\n    const compcat = document.querySelector('.compcat.active');\n    if (!compcat) {\n        return '';\n    }\n    return compcat.dataset.compcat ?? '';\n};\n\n/**\n * Get the current active compcat.\n * @returns int Id of active compcat.\n */\nconst getActiveCompcatId = () => {\n    const compcat = document.querySelector('.compcat.active');\n    if (!compcat) {\n        return 0;\n    }\n    return compcat.dataset.id ?? 0;\n};\n\n/**\n * Duplicate elements items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const duplicateItem = (id, table) => fetchMany(\n    [{\n        methodname: 'tiny_elements_duplicate_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n"],"names":["async","document","getElementById","addEventListener","importModal","e","getElementsByClassName","forEach","element","showModal","dataset","id","table","deleteModal","title","previewModal","showItems","compcat","querySelectorAll","preventDefault","ModalForm","formClass","args","modalConfig","show","editlicensesModal","compflavorModal","displaynamesModal","displaynamesFlavorModal","displaynamesVariantModal","duplicateItem","always","reload","target","closest","querySelector","click","params","compcatactive","classList","add","event","modalForm","getActiveCompcatId","categoryname","getActiveCompcatName","returnFocus","events","FORM_SUBMITTED","preview","modal","PreviewModal","create","templateContext","component","flavors","trim","split","config","M","cfg","importModalSubmitted","detail","update","location","stopPropagation","then","Notification","alert","html","catch","error","flavor","deleteItem","link","remove","err","message","methodname","itemsShow","usedFlavors","value","includes","length","push","flavorstring","map","item","join","found","loneflavors","lonevariants","lonecomponents","currentUrl","URL","window","href","searchParams","set","toString"],"mappings":"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"}