{"version":3,"file":"management.min.js","sources":["../src/management.js"],"sourcesContent":["import Modal from 'core/modal';\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {exception as displayException, deleteCancelPromise} from 'core/notification';\nimport {call as fetchMany} from 'core/ajax';\nimport {render as renderTemplate} from 'core/templates';\nclass PreviewModal extends Modal {\n    static TYPE = \"tiny_elements/management_preview\";\n    static TEMPLATE = \"tiny_elements/management_preview\";\n    configure(modalConfig) {\n        modalConfig.removeOnClose = true;\n        modalConfig.large = true;\n        super.configure(modalConfig);\n    }\n}\n\nexport const init = async(params) => {\n\n    // Add listener to import xml files.\n    let importxml = document.getElementById('elements_import');\n    importxml.addEventListener('click', async(e) => {\n        importModal(e);\n    });\n\n    // Add listener for adding a new item.\n    let additem = document.getElementsByClassName('add');\n    additem.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to edit items.\n    let edititems = document.getElementsByClassName('edit');\n    edititems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showModal(e, element.dataset.id, element.dataset.table);\n        });\n    });\n\n    // Add listener to delete items.\n    let deleteitems = document.getElementsByClassName('delete');\n    deleteitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            deleteModal(e, element.dataset.id, element.dataset.title, element.dataset.table);\n        });\n    });\n\n    // Add listener to preview items.\n    let previewitems = document.getElementsByClassName('preview');\n    previewitems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            previewModal(e);\n        });\n    });\n\n    // Add listener to select compcat to show corresponding items.\n    let compcats = document.getElementsByClassName('compcat');\n    compcats.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            showItems(e, element.dataset.compcat);\n        });\n    });\n\n    // Add listener to manage component flavor relation.\n    let compflavor = document.getElementById('elements_compflavor_button');\n    compflavor.addEventListener('click', async(e) => {\n        compflavorModal(e);\n    });\n\n    let buttonicons = document.querySelectorAll('.buttonicons');\n    buttonicons.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            compflavorModal(e);\n        });\n    });\n\n    let displaynamesbutton = document.getElementById('elements_displaynames_button');\n    displaynamesbutton.addEventListener('click', async(e) => {\n        displaynamesModal(e);\n    });\n\n    let displaynamesflavorbutton = document.getElementById('elements_displaynames_flavor_button');\n    displaynamesflavorbutton.addEventListener('click', async(e) => {\n        displaynamesFlavorModal(e);\n    });\n\n    let displaynamesvariantbutton = document.getElementById('elements_displaynames_variant_button');\n    displaynamesvariantbutton.addEventListener('click', async(e) => {\n        displaynamesVariantModal(e);\n    });\n\n    // Add listener to duplicate items.\n    let duplicateitems = document.getElementsByClassName('duplicate');\n    duplicateitems.forEach(element => {\n        element.addEventListener('click', async() => {\n            duplicateItem(element.dataset.id, element.dataset.table);\n            reload();\n        });\n    });\n\n    // Add image and text to item setting click area.\n    let enlargeItems = document.querySelectorAll(\n        '.flavor .card-body > .clickingextended, .component .card-body > .clickingextended, .variant .card-body > .clickingextended'\n    );\n    enlargeItems.forEach(element => {\n        element.addEventListener('click', async(e) => {\n            let item = e.target.closest('.item');\n            item.querySelector('a.edit').click();\n        });\n    });\n\n    // After submitting a new item, reset active compcat.\n    if (params.compcatactive) {\n        let compcat = document.querySelector('.compcat[data-compcat=\"' + params.compcatactive + '\"]');\n        if (compcat) {\n            showItems(false, params.compcatactive);\n            compcat.classList.add('active');\n        }\n    }\n};\n\n/**\n * Show dynamic form to add/edit a source.\n * @param {*} e\n * @param {*} id\n * @param {*} table\n */\nfunction showModal(e, id, table) {\n    e.preventDefault();\n    let title;\n    if (id == 0) {\n        title = getString('additem', 'tiny_elements');\n    } else {\n        title = getString('edititem', 'tiny_elements');\n    }\n\n    const modalForm = new ModalForm({\n        // Set formclass, depending on component.\n        formClass: \"tiny_elements\\\\form\\\\management_\" + table + \"_form\",\n        args: {\n            id: id,\n        },\n        modalConfig: {title: title},\n    });\n    // Conditional reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => reloadIfNew(modalForm.getFormNode()));\n\n    modalForm.show();\n}\n\n/**\n * Show modal to preview css version.\n * @param {*} e\n */\nasync function previewModal(e) {\n    e.preventDefault();\n    let preview = e.target.closest(\".preview\");\n    const modal = await PreviewModal.create({\n        templateContext: {\n            component: preview.dataset.component,\n            flavors: preview.dataset.flavors.trim().split(\" \"),\n            config: M.cfg,\n        },\n    });\n    modal.show();\n}\n\n/**\n * Show dynamic form to import xml backups.\n * @param {*} e\n */\nfunction importModal(e) {\n    e.preventDefault();\n    let title = getString('import', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_elements\\\\form\\\\management_import_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, importModalSubmitted);\n\n    modalForm.show();\n}\n\n/**\n * Process import form submit.\n * @param {*} e\n */\nasync function importModalSubmitted(e) {\n    // Reload page after submit.\n    if (e.detail.update) {\n        location.reload();\n    } else {\n        e.stopPropagation();\n        renderTemplate('tiny_elements/management_import_form_result', e.detail).then(async(html) => {\n            await Notification.alert(\n                getString('import_simulation', 'tiny_elements'),\n                html,\n                getString('close', 'tiny_elements')\n            );\n            return true;\n        }).catch((error) => {\n            displayException(error);\n        });\n    }\n}\n\n/**\n * Load modal to edit icon urls.\n * @param {*} e\n */\nfunction compflavorModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n    const target = e.target.closest('.buttonicons');\n    const component = target.dataset.component ?? '';\n    const flavor = target.dataset.flavor ?? '';\n    const modalForm = new ModalForm({\n        // Load import form.\n        formClass: \"tiny_elements\\\\form\\\\management_comp_flavor_form\",\n        args: {\n            component: component,\n            flavor: flavor,\n        },\n        modalConfig: {title: title},\n    });\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} e\n * @returns {void}\n */\nfunction displaynamesModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} e\n * @returns {void}\n */\nfunction displaynamesFlavorModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_flavors_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Load modal to edit displaynames.\n * @param {*} e\n * @returns {void}\n */\nfunction displaynamesVariantModal(e) {\n    e.preventDefault();\n    let title = getString('manage', 'tiny_elements');\n\n    const modalForm = new ModalForm({\n        // Load displaynames bulk edit form.\n        formClass: \"tiny_elements\\\\form\\\\management_displaynames_variants_form\",\n        args: {},\n        modalConfig: {title: title},\n    });\n\n    // Reload page after submit.\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => location.reload());\n\n    modalForm.show();\n}\n\n/**\n * Show dynamic form to delete a source.\n * @param {*} e\n * @param {*} id\n * @param {*} title\n * @param {*} table\n */\nfunction deleteModal(e, id, title, table) {\n    e.preventDefault();\n\n    deleteCancelPromise(\n        getString('delete', 'tiny_elements', title),\n        getString('deletewarning', 'tiny_elements'),\n    ).then(async() => {\n        if (id !== 0) {\n            try {\n                const deleted = await deleteItem(id, table);\n                if (deleted) {\n                    const link = document.querySelector('[data-table=\"' + table + '\"][data-id=\"' + id + '\"]');\n                    if (link) {\n                        const card = link.closest(\".item\");\n                        card.remove();\n                    }\n                }\n            } catch (error) {\n                displayException(error);\n            }\n        }\n        return;\n    }).catch(() => {\n        return;\n    });\n}\n\n/**\n * Delete elements items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const deleteItem = (\n    id,\n    table,\n) => fetchMany(\n    [{\n        methodname: 'tiny_elements_delete_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n\n/**\n * Show items after clicking a compcat.\n * @param {*} e\n * @param {*} compcat\n */\nfunction showItems(e, compcat) {\n    // But first hide all items.\n    let itemsHide = document.querySelectorAll('.flavor, .component, .variant');\n    itemsHide.forEach(element => {\n        element.classList.add('hidden');\n    });\n\n    // Show component and variants with compcat name and read the flavors.\n    let itemsShow = document.getElementsByClassName(compcat);\n    let usedFlavors = [];\n    itemsShow.forEach(element => {\n        element.classList.remove('hidden');\n        // Get all flavors to show if on compcat element.\n        if (typeof element.dataset.flavors !== 'undefined') {\n            let flavors = element.dataset.flavors.split(' ');\n            for (let value of flavors) {\n                if (!usedFlavors.includes(value) && value.length != 0) {\n                    usedFlavors.push(value);\n                }\n            }\n        }\n    });\n\n    // Show the flavors.\n    let flavorstring = usedFlavors.map(item => `.${item}`).join(', ');\n    if (flavorstring.length) {\n        let flavorsShow = document.querySelectorAll(flavorstring);\n        flavorsShow.forEach(element => {\n            element.classList.remove('hidden');\n        });\n    }\n\n    // Show add buttons.\n    let addsShow = document.getElementsByClassName('addcontainer');\n    addsShow.forEach(element => {\n        element.classList.remove('hidden');\n    });\n\n    // Unmark all and mark clicked compcat.\n    if (e) {\n        let items = document.getElementsByClassName('compcat');\n        items.forEach(element => {\n            element.classList.remove('active');\n        });\n        let item = e.target.closest('.compcat');\n        item.classList.add('active');\n    }\n\n    // Special case, unassigned items, show all items without connection to compcat.\n    if (compcat == 'found-items') {\n        let found = document.querySelector('.compcat[data-compcat=\"found-items\"]');\n        if (found.dataset.loneflavors.length) {\n            let flavorsShow = document.querySelectorAll(found.dataset.loneflavors);\n            flavorsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonevariants.length) {\n            let variantsShow = document.querySelectorAll(found.dataset.lonevariants);\n            variantsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n        if (found.dataset.lonecomponents.length) {\n            let componentsShow = document.querySelectorAll(found.dataset.lonecomponents);\n            componentsShow.forEach(element => {\n                element.classList.remove('hidden');\n            });\n        }\n    }\n}\n\n/**\n * Reload for new items.\n * @param {*} form\n */\nfunction reloadIfNew(form) {\n    // Newly created element without id?\n    if (!form.elements.id.value) {\n        reload();\n    }\n}\n\n/**\n * Reload page with active compcat.\n */\nfunction reload() {\n    // Reload page with active compcat.\n    const compcat = document.querySelector('.compcat.active');\n    const currentUrl = new URL(window.location.href);\n    currentUrl.searchParams.set('compcat', compcat.dataset.compcat);\n    window.location.href = currentUrl.toString();\n}\n\n/**\n * Duplicate elements items.\n * @param {*} id\n * @param {*} table\n * @returns {mixed}\n */\nexport const duplicateItem = (\n    id,\n    table,\n) => fetchMany(\n    [{\n        methodname: 'tiny_elements_duplicate_item',\n        args: {\n            id,\n            table,\n        }\n    }])[0];\n\n"],"names":["PreviewModal","Modal","configure","modalConfig","removeOnClose","large","showModal","e","id","table","title","preventDefault","modalForm","ModalForm","formClass","args","addEventListener","events","FORM_SUBMITTED","getFormNode","elements","value","reload","show","importModalSubmitted","detail","update","location","stopPropagation","then","async","Notification","alert","html","catch","error","compflavorModal","target","closest","component","dataset","flavor","document","getElementById","importModal","getElementsByClassName","forEach","element","deleteItem","link","querySelector","remove","deleteModal","preview","create","templateContext","flavors","trim","split","config","M","cfg","previewModal","showItems","compcat","querySelectorAll","displaynamesModal","displaynamesFlavorModal","displaynamesVariantModal","duplicateItem","click","params","compcatactive","classList","add","methodname","itemsShow","usedFlavors","includes","length","push","flavorstring","map","item","join","found","loneflavors","lonevariants","lonecomponents","currentUrl","URL","window","href","searchParams","set","toString"],"mappings":"4lDAOMA,qBAAqBC,eAGvBC,UAAUC,aACNA,YAAYC,eAAgB,EAC5BD,YAAYE,OAAQ,QACdH,UAAUC,8BANlBH,oBACY,oDADZA,wBAEgB,6CAwHbM,UAAUC,EAAGC,GAAIC,WAElBC,MADJH,EAAEI,iBAGED,MADM,GAANF,IACQ,mBAAU,UAAW,kBAErB,mBAAU,WAAY,uBAG5BI,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,mCAAqCL,MAAQ,QACxDM,KAAM,CACFP,GAAIA,IAERL,YAAa,CAACO,MAAOA,SAGzBE,UAAUI,iBAAiBJ,UAAUK,OAAOC,gBAAgB,KAAkBN,UAAUO,cAgS9EC,SAASZ,GAAGa,OAClBC,YA/RJV,UAAUW,sBA2CCC,qBAAqBjB,GAE5BA,EAAEkB,OAAOC,OACTC,SAASL,UAETf,EAAEqB,wCACa,8CAA+CrB,EAAEkB,QAAQI,MAAKC,MAAAA,aACnEC,sBAAaC,OACf,mBAAU,oBAAqB,iBAC/BC,MACA,mBAAU,QAAS,mBAEhB,KACRC,OAAOC,oCACWA,oBASpBC,gBAAgB7B,mDACrBA,EAAEI,qBACED,OAAQ,mBAAU,SAAU,uBAC1B2B,OAAS9B,EAAE8B,OAAOC,QAAQ,gBAC1BC,wCAAYF,OAAOG,QAAQD,iEAAa,GACxCE,qCAASJ,OAAOG,QAAQC,8DAAU,GACtB,IAAI5B,mBAAU,CAE5BC,UAAW,mDACXC,KAAM,CACFwB,UAAWA,UACXE,OAAQA,QAEZtC,YAAa,CAACO,MAAOA,SAGfa,qBAtNMO,MAAAA,YAGAY,SAASC,eAAe,mBAC9B3B,iBAAiB,SAASc,MAAAA,cAwJnBvB,GACjBA,EAAEI,qBACED,OAAQ,mBAAU,SAAU,uBAE1BE,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,8CACXC,KAAM,GACNZ,YAAa,CAACO,MAAOA,SAEzBE,UAAUI,iBAAiBJ,UAAUK,OAAOC,eAAgBM,sBAE5DZ,UAAUW,OAnKNqB,CAAYrC,MAIFmC,SAASG,uBAAuB,OACtCC,SAAQC,UACZA,QAAQ/B,iBAAiB,SAASc,MAAAA,IAC9BxB,UAAUC,EAAGwC,QAAQP,QAAQhC,GAAIuC,QAAQP,QAAQ/B,aAKzCiC,SAASG,uBAAuB,QACtCC,SAAQC,UACdA,QAAQ/B,iBAAiB,SAASc,MAAAA,IAC9BxB,UAAUC,EAAGwC,QAAQP,QAAQhC,GAAIuC,QAAQP,QAAQ/B,aAKvCiC,SAASG,uBAAuB,UACtCC,SAAQC,UAChBA,QAAQ/B,iBAAiB,SAASc,MAAAA,cAuQrBvB,EAAGC,GAAIE,MAAOD,OAC/BF,EAAEI,wDAGE,mBAAU,SAAU,gBAAiBD,QACrC,mBAAU,gBAAiB,kBAC7BmB,MAAKC,aACQ,IAAPtB,gBAE0BwC,WAAWxC,GAAIC,OACxB,OACHwC,KAAOP,SAASQ,cAAc,gBAAkBzC,MAAQ,eAAiBD,GAAK,SAChFyC,KAAM,CACOA,KAAKX,QAAQ,SACrBa,WAGf,MAAOhB,mCACYA,WAI1BD,OAAM,SA5RDkB,CAAY7C,EAAGwC,QAAQP,QAAQhC,GAAIuC,QAAQP,QAAQ9B,MAAOqC,QAAQP,QAAQ/B,aAK/DiC,SAASG,uBAAuB,WACtCC,SAAQC,UACjBA,QAAQ/B,iBAAiB,SAASc,MAAAA,oBAwGdvB,GACxBA,EAAEI,qBACE0C,QAAU9C,EAAE8B,OAAOC,QAAQ,mBACXtC,aAAasD,OAAO,CACpCC,gBAAiB,CACbhB,UAAWc,QAAQb,QAAQD,UAC3BiB,QAASH,QAAQb,QAAQgB,QAAQC,OAAOC,MAAM,KAC9CC,OAAQC,EAAEC,QAGZtC,OAjHEuC,CAAavD,SAKNmC,SAASG,uBAAuB,WACtCC,SAAQC,UACbA,QAAQ/B,iBAAiB,SAASc,MAAAA,IAC9BiC,UAAUxD,EAAGwC,QAAQP,QAAQwB,eAKpBtB,SAASC,eAAe,8BAC9B3B,iBAAiB,SAASc,MAAAA,IACjCM,gBAAgB7B,MAGFmC,SAASuB,iBAAiB,gBAChCnB,SAAQC,UAChBA,QAAQ/B,iBAAiB,SAASc,MAAAA,IAC9BM,gBAAgB7B,SAICmC,SAASC,eAAe,gCAC9B3B,iBAAiB,SAASc,MAAAA,cAgKtBvB,GACvBA,EAAEI,qBACED,OAAQ,mBAAU,SAAU,uBAE1BE,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,oDACXC,KAAM,GACNZ,YAAa,CAACO,MAAOA,SAIzBE,UAAUI,iBAAiBJ,UAAUK,OAAOC,gBAAgB,IAAMS,SAASL,WAE3EV,UAAUW,OA7KN2C,CAAkB3D,MAGSmC,SAASC,eAAe,uCAC9B3B,iBAAiB,SAASc,MAAAA,cAiLtBvB,GAC7BA,EAAEI,qBACED,OAAQ,mBAAU,SAAU,uBAE1BE,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,4DACXC,KAAM,GACNZ,YAAa,CAACO,MAAOA,SAIzBE,UAAUI,iBAAiBJ,UAAUK,OAAOC,gBAAgB,IAAMS,SAASL,WAE3EV,UAAUW,OA9LN4C,CAAwB5D,MAGImC,SAASC,eAAe,wCAC9B3B,iBAAiB,SAASc,MAAAA,cAkMtBvB,GAC9BA,EAAEI,qBACED,OAAQ,mBAAU,SAAU,uBAE1BE,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,6DACXC,KAAM,GACNZ,YAAa,CAACO,MAAOA,SAIzBE,UAAUI,iBAAiBJ,UAAUK,OAAOC,gBAAgB,IAAMS,SAASL,WAE3EV,UAAUW,OA/MN6C,CAAyB7D,MAIRmC,SAASG,uBAAuB,aACtCC,SAAQC,UACnBA,QAAQ/B,iBAAiB,SAASc,UAC9BuC,cAActB,QAAQP,QAAQhC,GAAIuC,QAAQP,QAAQ/B,OAClDa,eAKWoB,SAASuB,iBACxB,8HAESnB,SAAQC,UACjBA,QAAQ/B,iBAAiB,SAASc,MAAAA,IACnBvB,EAAE8B,OAAOC,QAAQ,SACvBY,cAAc,UAAUoB,cAKjCC,OAAOC,cAAe,KAClBR,QAAUtB,SAASQ,cAAc,0BAA4BqB,OAAOC,cAAgB,MACpFR,UACAD,WAAU,EAAOQ,OAAOC,eACxBR,QAAQS,UAAUC,IAAI,mBA8NrB1B,WAAa,CACtBxC,GACAC,SACC,cACD,CAAC,CACGkE,WAAY,4BACZ5D,KAAM,CACFP,GAAAA,GACAC,MAAAA,UAEJ,YAOCsD,UAAUxD,EAAGyD,SAEFtB,SAASuB,iBAAiB,iCAChCnB,SAAQC,UACdA,QAAQ0B,UAAUC,IAAI,iBAItBE,UAAYlC,SAASG,uBAAuBmB,SAC5Ca,YAAc,GAClBD,UAAU9B,SAAQC,aACdA,QAAQ0B,UAAUtB,OAAO,eAEc,IAA5BJ,QAAQP,QAAQgB,QAAyB,KAC5CA,QAAUT,QAAQP,QAAQgB,QAAQE,MAAM,SACvC,IAAIrC,SAASmC,QACTqB,YAAYC,SAASzD,QAA0B,GAAhBA,MAAM0D,QACtCF,YAAYG,KAAK3D,eAO7B4D,aAAeJ,YAAYK,KAAIC,iBAAYA,QAAQC,KAAK,SACxDH,aAAaF,OAAQ,CACHrC,SAASuB,iBAAiBgB,cAChCnC,SAAQC,UAChBA,QAAQ0B,UAAUtB,OAAO,gBAKlBT,SAASG,uBAAuB,gBACtCC,SAAQC,UACbA,QAAQ0B,UAAUtB,OAAO,aAIzB5C,EAAG,CACSmC,SAASG,uBAAuB,WACtCC,SAAQC,UACVA,QAAQ0B,UAAUtB,OAAO,aAElB5C,EAAE8B,OAAOC,QAAQ,YACvBmC,UAAUC,IAAI,aAIR,eAAXV,QAA0B,KACtBqB,MAAQ3C,SAASQ,cAAc,2CAC/BmC,MAAM7C,QAAQ8C,YAAYP,OAAQ,CAChBrC,SAASuB,iBAAiBoB,MAAM7C,QAAQ8C,aAC9CxC,SAAQC,UAChBA,QAAQ0B,UAAUtB,OAAO,gBAG7BkC,MAAM7C,QAAQ+C,aAAaR,OAAQ,CAChBrC,SAASuB,iBAAiBoB,MAAM7C,QAAQ+C,cAC9CzC,SAAQC,UACjBA,QAAQ0B,UAAUtB,OAAO,gBAG7BkC,MAAM7C,QAAQgD,eAAeT,OAAQ,CAChBrC,SAASuB,iBAAiBoB,MAAM7C,QAAQgD,gBAC9C1C,SAAQC,UACnBA,QAAQ0B,UAAUtB,OAAO,wBAoBhC7B,eAEC0C,QAAUtB,SAASQ,cAAc,mBACjCuC,WAAa,IAAIC,IAAIC,OAAOhE,SAASiE,MAC3CH,WAAWI,aAAaC,IAAI,UAAW9B,QAAQxB,QAAQwB,SACvD2B,OAAOhE,SAASiE,KAAOH,WAAWM,gDASzB1B,cAAgB,CACzB7D,GACAC,SACC,cACD,CAAC,CACGkE,WAAY,+BACZ5D,KAAM,CACFP,GAAAA,GACAC,MAAAA,UAEJ"}