{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Elements UI.\n *\n * @module      tiny_elements/ui\n * @copyright   2022 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ElementsModal from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport {\n    isStudent,\n    showPreview\n} from './options';\nimport ModalEvents from 'core/modal_events';\nimport {\n    addVariant,\n    getVariantsClass,\n    getVariantHtml,\n    getVariantPreferences,\n    getVariantsHtml,\n    loadVariantPreferences,\n    removeVariant,\n    setData as setVariantsData\n} from './variantslib';\nimport {\n    savePreferences,\n    loadPreferences,\n    Preferences\n} from './preferencelib';\nimport {getContextId} from 'editor_tiny/options';\nimport Data from './data';\n\nlet currentFlavor = '';\nlet currentFlavorId = 0;\nlet currentCategoryId = 1;\nlet lastFlavor = [];\n\nlet data = {};\n\n/**\n * Handle action\n *\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    data = new Data(\n        getContextId(editor),\n        isStudent(editor),\n        showPreview(editor)\n    );\n    await data.loadData();\n    setVariantsData(data);\n\n    currentCategoryId = await loadPreferences(Preferences.category);\n    lastFlavor = await loadPreferences(Preferences.category_flavors);\n    if (lastFlavor === null) {\n        lastFlavor = [];\n    }\n    let componentVariants = await loadPreferences(Preferences.component_variants);\n    if (componentVariants === null) {\n        componentVariants = {};\n    }\n    loadVariantPreferences(componentVariants);\n    displayDialogue(editor);\n};\n\n/**\n * Display modal\n *\n * @param  {TinyMCE} editor\n */\nconst displayDialogue = async(editor) => {\n    const templateContext = data.getTemplateContext(editor);\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n        type: ElementsModal.TYPE,\n        templateContext: templateContext,\n        large: true,\n    });\n\n    // Choose class to modal.\n    const modalClass = data.getPreviewElements() ? 'elements-modal' : 'elements-modal-no-preview';\n\n    // Set class to modal.\n    editor.targetElm.closest('body').classList.add(modalClass);\n\n    modal.show();\n\n    // Event modal listener.\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        handleModalHidden(editor);\n    });\n\n    // Event listener for categories without flavors.\n    const soleCategories = modal.getRoot()[0].querySelectorAll('.elements-category.no-flavors');\n    soleCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryClick(event, modal);\n        });\n    });\n\n    // Event listener for categories with flavors.\n    const selectCategories = modal.getRoot()[0].querySelectorAll('.elements-category-flavor');\n    selectCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryFlavorClick(event, modal);\n        });\n    });\n\n    // Event listener for category dropdown, triggering to switch to last used flavor.\n    const selectCategoriesRemember = modal.getRoot()[0].querySelectorAll('.nav-link.dropdown-toggle');\n    selectCategoriesRemember.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryRemember(event, modal);\n        });\n    });\n\n    // Event buttons listeners.\n    const buttons = modal.getRoot()[0].querySelectorAll('.elementst-dialog-button');\n    buttons.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonClick(event, editor, modal);\n        });\n        if (data.getPreviewElements()) {\n            node.addEventListener('mouseenter', (event) => {\n                handleButtonMouseEvent(event, modal, true);\n            });\n            node.addEventListener('mouseleave', (event) => {\n                handleButtonMouseEvent(event, modal, false);\n            });\n        }\n    });\n\n    // Event variants listeners.\n    const variants = modal.getRoot()[0].querySelectorAll('.elements-button-variant');\n    variants.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleVariantClick(event, modal);\n        });\n    });\n\n    // Select first or saved category.\n    if (soleCategories.length > 0 || selectCategories.length > 0) {\n        let savedCategory = currentCategoryId;\n        if (soleCategories.length == 0 || soleCategories[0].displayorder > selectCategories[0].displayorder) {\n            selectCategories[0].click();\n        } else {\n            soleCategories[0].click();\n        }\n        if (savedCategory != 0) {\n            soleCategories.forEach((node) => {\n                if (node.dataset.categoryid == savedCategory) {\n                    node.click();\n                }\n            });\n            selectCategories.forEach((node) => {\n                if (node.dataset.categoryid == savedCategory) {\n                    node.click();\n                }\n            });\n        }\n    }\n};\n\n/**\n * Handle a click within filter button.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryClick = (event, modal) => {\n    const link = event.target;\n    currentCategoryId = link.dataset.categoryid;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n\n    // Show/hide component buttons.\n    showCategoryButtons(modal, currentCategoryId);\n};\n\n/**\n * Handle a click on a flavor in the category dropdown.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryFlavorClick = (event, modal) => {\n    const link = event.target;\n    currentFlavor = link.dataset.flavor;\n    currentFlavorId = link.dataset.id;\n    currentCategoryId = link.dataset.categoryid;\n    lastFlavor[currentCategoryId] = currentFlavorId;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n    const category = modal.getRoot()[0].querySelector('.nav-link[data-categoryid=\"' + currentCategoryId + '\"]');\n    category.classList.add('active');\n\n    const componentButtons = modal.getRoot()[0].querySelectorAll('.elements-buttons-preview button');\n    componentButtons.forEach(componentButton => {\n        // Remove previous flavor.\n        if (componentButton.dataset.flavor != undefined) {\n            componentButton.classList.remove(componentButton.dataset.flavor);\n        }\n        componentButton.classList.add(currentFlavor);\n        componentButton.dataset.flavor = currentFlavor;\n        if (\n            (componentButton.dataset.flavorlist == '' || componentButton.dataset.flavorlist.split(',').includes(currentFlavor)) &&\n            componentButton.dataset.category == currentCategoryId\n        ) {\n            componentButton.classList.remove('elements-hidden');\n            if (componentButton.dataset.flavorlist != '') {\n                let variants = getVariantsClass(data.getComponentById(componentButton.dataset.id).name, currentFlavor);\n                let availableVariants = componentButton.querySelectorAll('.elements-button-variant');\n                availableVariants.forEach((variant) => {\n                    updateVariantButtonState(variant, variants.indexOf(variant.dataset.variantclass) != -1);\n                });\n            }\n        } else {\n            componentButton.classList.add('elements-hidden');\n        }\n    });\n\n};\n\n/**\n * When opening the category dropdown, try to load remembered flavor.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryRemember = (event, modal) => {\n    const link = event.target;\n    currentCategoryId = link.dataset.categoryid;\n    currentFlavorId = lastFlavor[currentCategoryId];\n\n    if (currentFlavorId != undefined) {\n        // Call handleCategoryFlavorClick with tampered data.\n        let e = {target: modal.getRoot()[0].querySelector('.elements-category-flavor[data-id=\"' + currentFlavorId + '\"]')};\n        handleCategoryFlavorClick(e, modal);\n    }\n};\n\n/**\n * Handle when closing the Modal.\n *\n * @param {obj} editor\n */\nconst handleModalHidden = (editor) => {\n    editor.targetElm.closest('body').classList.remove('elements-modal-no-preview');\n    if (currentCategoryId != 0 && currentFlavorId != 0) {\n        savePreferences([\n            {type: Preferences.category, value: currentCategoryId},\n            {type: Preferences.category_flavors, value: JSON.stringify(lastFlavor)},\n            {type: Preferences.component_variants, value: JSON.stringify(getVariantPreferences())}\n        ]);\n    }\n};\n\nconst updateComponentCode = (componentCode, selectedButton, placeholder, flavor = '') => {\n    componentCode = componentCode.replace('{{PLACEHOLDER}}', placeholder);\n    const comp = data.getComponentById(selectedButton);\n    // Return active variants for current component.\n    const variants = getVariantsClass(comp.name, flavor);\n\n    // Apply variants to html component.\n    if (variants.length > 0) {\n        componentCode = componentCode.replace('{{VARIANTS}}', variants.join(' '));\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', getVariantsHtml(comp.name));\n    } else {\n        componentCode = componentCode.replace('{{VARIANTS}}', '');\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', '');\n    }\n\n    if (currentFlavor) {\n        componentCode = componentCode.replace('{{FLAVOR}}', currentFlavor);\n    } else {\n        componentCode = componentCode.replace('{{FLAVOR}}', '');\n    }\n\n    componentCode = componentCode.replace('{{COMPONENT}}', comp.name);\n    componentCode = componentCode.replace('{{CATEGORY}}', data.getCategoryById(currentCategoryId).name);\n\n    // Apply random IDs.\n    componentCode = applyRandomID(componentCode);\n\n    // Apply lang strings.\n    componentCode = applyLangStrings(componentCode);\n\n    return componentCode;\n};\n\n/**\n * Handle a click in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} editor\n * @param {obj} modal\n */\nconst handleButtonClick = async(event, editor, modal) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n\n    const comp = data.getComponentById(selectedButton);\n\n    // Component button.\n    if (comp) {\n        const sel = editor.selection.getContent();\n        let componentCode = comp.code;\n        const placeholder = (sel.length > 0 ? sel : comp.text);\n\n        let flavor = comp.flavors.length > 0 ? currentFlavor : '';\n\n        // Create a new node to replace the placeholder.\n        const randomId = generateRandomID();\n        const newNode = document.createElement('span');\n        newNode.dataset.id = randomId;\n        newNode.innerHTML = placeholder;\n        componentCode = updateComponentCode(componentCode, selectedButton, newNode.outerHTML, flavor);\n        // Sets new content.\n        editor.selection.setContent(componentCode);\n\n        // Select text.\n        const nodeSel = editor.dom.select('span[data-id=\"' + randomId + '\"]');\n        if (nodeSel?.[0]) {\n            editor.selection.select(nodeSel[0]);\n        }\n\n        modal.destroy();\n        editor.focus();\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} modal\n * @param {bool} show\n */\nconst handleButtonMouseEvent = (event, modal, show) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + selectedButton + '\"]');\n    const previewDefault = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-default\"]');\n    const comp = data.getComponentById(selectedButton);\n    let flavor = comp.flavors.length > 0 ? currentFlavor : '';\n\n    node.innerHTML = updateComponentCode(comp.code, selectedButton, comp.text, flavor);\n\n    if (node) {\n        if (show) {\n            previewDefault.classList.toggle('elements-hidden');\n            node.classList.toggle('elements-hidden');\n        } else {\n            node.classList.toggle('elements-hidden');\n            previewDefault.classList.toggle('elements-hidden');\n        }\n    }\n};\n\n/**\n * Handle a mouse event within the variant buttons.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n */\nconst handleVariantClick = (event, modal) => {\n    event.stopPropagation();\n    const variant = event.target.closest('span');\n    const button = event.target.closest('button');\n    const comp = data.getComponentById(button.dataset.id);\n    const flavor = comp.flavors.length > 0 ? currentFlavor : '';\n\n    updateVariantComponentState(variant, button, modal, false, true);\n\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"]');\n    node.innerHTML = updateComponentCode(\n        comp.code,\n        button.dataset.id,\n        comp.text,\n        flavor\n    );\n};\n\n/**\n * Update a variant component UI.\n *\n * @param {obj} variant\n * @param {obj} button\n * @param {obj} modal\n * @param {bool} show\n * @param {bool} updateHtml\n */\nconst updateVariantComponentState = (variant, button, modal, show, updateHtml) => {\n    const selectedVariant = variant.dataset.variantclass;\n    const selectedButton = button.dataset.id;\n    const componentClass = button.dataset.classcomponent;\n    const previewComponent = modal.getRoot()[0]\n        .querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"] .' + componentClass);\n    const variantPreview = modal.getRoot()[0]\n        .querySelector('span[data-id=\"variantHTML-' + button.dataset.id + '\"]');\n    const comp = data.getComponentById(selectedButton);\n    let variantsHtml = '';\n    let hasflavors = comp.flavors.length > 0;\n\n    if (previewComponent) {\n        if (updateHtml) {\n            if (variant.dataset.state == 'on') {\n                removeVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, false);\n                previewComponent.classList.remove(selectedVariant);\n            } else {\n                addVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, true);\n                previewComponent.classList.add(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = getVariantsHtml(comp.name);\n            }\n        } else {\n            variantsHtml = getVariantsHtml(comp.name);\n            if (show) {\n                previewComponent.classList.add(selectedVariant);\n                variantsHtml += getVariantHtml(variant.dataset.variant);\n            } else {\n                previewComponent.classList.remove(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = variantsHtml;\n            }\n        }\n    } else {\n        // Update variants preferences.\n        if (variant.dataset.state == 'on') {\n            removeVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, false);\n        } else {\n            addVariant(comp.name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, true);\n        }\n    }\n};\n\n/**\n * Update a variant button UI.\n *\n * @param {obj} variant\n * @param {bool} activate\n */\nconst updateVariantButtonState = (variant, activate) => {\n    if (activate) {\n        variant.dataset.state = 'on';\n        variant.classList.remove(variant.dataset.variant + '-variant-off');\n        variant.classList.add(variant.dataset.variant + '-variant-on');\n        variant.classList.add('on');\n    } else {\n        variant.dataset.state = 'off';\n        variant.classList.remove(variant.dataset.variant + '-variant-on');\n        variant.classList.add(variant.dataset.variant + '-variant-off');\n        variant.classList.remove('on');\n    }\n};\n\n/**\n * Show/hide buttons depend on selected context.\n *\n * @param  {object} modal\n * @param  {String} context\n */\nconst showCategoryButtons = (modal, context) => {\n    const showNodes = modal.getRoot()[0].querySelectorAll('button[data-type=\"' + context + '\"]');\n    const hideNodes = modal.getRoot()[0].querySelectorAll('button[data-type]:not([data-type=\"' + context + '\"])');\n\n    showNodes.forEach(node => node.classList.remove('elements-hidden'));\n    hideNodes.forEach(node => node.classList.add('elements-hidden'));\n};\n\n/**\n * Replace all localized strings.\n *\n * @param  {String} text\n * @return {String} String with lang tags replaced with a localized string.\n */\nconst applyLangStrings = (text) => {\n    const compRegex = /{{#([^}]*)}}/g;\n\n    [...text.matchAll(compRegex)].forEach(strLang => {\n        text = text.replace('{{#' + strLang[1] + '}}', data.getLangString(strLang[1]));\n    });\n\n    return text;\n};\n\n/**\n * Generates a random string.\n * @return {string} A random string\n */\nconst generateRandomID = () => {\n    const timestamp = new Date().getTime();\n    return 'R' + Math.round(Math.random() * 100000) + '-' + timestamp;\n};\n\n/**\n * Replace all ID tags with a random string.\n * @param  {String} text\n * @return {String} String with all ID tags replaced with a random string.\n */\nconst applyRandomID = (text) => {\n    const compRegex = /{{@ID}}/g;\n\n    if (text.match(compRegex)) {\n        text = text.replace(compRegex, generateRandomID());\n    }\n\n    return text;\n};\n"],"names":["currentFlavor","currentFlavorId","currentCategoryId","lastFlavor","data","async","Data","editor","loadData","Preferences","category","category_flavors","componentVariants","component_variants","displayDialogue","templateContext","getTemplateContext","modal","ModalFactory","create","type","ElementsModal","TYPE","large","modalClass","getPreviewElements","targetElm","closest","classList","add","show","getRoot","on","ModalEvents","hidden","handleModalHidden","soleCategories","querySelectorAll","forEach","node","addEventListener","event","handleCategoryClick","selectCategories","handleCategoryFlavorClick","handleCategoryRemember","handleButtonClick","handleButtonMouseEvent","handleVariantClick","length","savedCategory","displayorder","click","dataset","categoryid","link","target","remove","showCategoryButtons","flavor","id","querySelector","componentButton","undefined","flavorlist","split","includes","variants","getComponentById","name","variant","updateVariantButtonState","indexOf","variantclass","e","value","JSON","stringify","updateComponentCode","componentCode","selectedButton","placeholder","replace","comp","join","getCategoryById","applyRandomID","applyLangStrings","sel","selection","getContent","code","text","flavors","randomId","generateRandomID","newNode","document","createElement","innerHTML","outerHTML","setContent","nodeSel","dom","select","destroy","focus","previewDefault","toggle","stopPropagation","button","updateVariantComponentState","updateHtml","selectedVariant","componentClass","classcomponent","previewComponent","variantPreview","variantsHtml","hasflavors","state","activate","context","showNodes","hideNodes","matchAll","strLang","getLangString","timestamp","Date","getTime","Math","round","random","compRegex","match"],"mappings":"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"}