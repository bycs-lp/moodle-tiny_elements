{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Elements UI.\n *\n * @module      tiny_elements/ui\n * @copyright   2022 Marc Catal√† <reskit@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {component} from './common';\nimport ElementsModal from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport {get_strings as getStrings} from 'core/str';\nimport {\n    isStudent,\n    showPreview\n} from './options';\nimport ModalEvents from 'core/modal_events';\nimport {\n    addVariant,\n    getVariantsClass,\n    getVariantHtml,\n    getVariantPreferences,\n    getVariantsHtml,\n    loadVariantPreferences,\n    removeVariant,\n    setFlavors,\n    setVariants,\n    variantExists,\n    setComponents\n} from './variantslib';\nimport {\n    findByName\n} from './helper';\nimport {\n    savePreferences,\n    loadPreferences,\n    Preferences\n} from './preferencelib';\nimport {call as fetchMany} from 'core/ajax';\nimport {getContextId} from 'editor_tiny/options';\n\nlet userStudent = false;\n\nlet previewElements = true;\nlet components = [];\nlet categories = [];\nlet flavors = [];\nlet variants = [];\nlet langStrings = {};\nlet contextid = 1;\n\nlet currentFlavor = '';\nlet currentFlavorId = 0;\nlet currentCategoryId = 1;\nlet lastFlavor = [];\n\n/**\n * Handle action\n *\n * @param {TinyMCE} editor\n */\nexport const handleAction = async(editor) => {\n    contextid = getContextId(editor);\n    userStudent = isStudent(editor);\n    let data = await getElementsData();\n    components = data.components;\n    categories = data.categories;\n    flavors = data.flavors;\n    variants = data.variants;\n    setComponents(components);\n    setVariants(variants);\n    setFlavors(flavors);\n    previewElements = showPreview(editor);\n    langStrings = await getAllStrings();\n    currentCategoryId = await loadPreferences(Preferences.category);\n    lastFlavor = await loadPreferences(Preferences.category_flavors);\n    if (lastFlavor === null) {\n        lastFlavor = [];\n    }\n    let componentVariants = await loadPreferences(Preferences.component_variants);\n    if (componentVariants === null) {\n        componentVariants = {};\n    }\n    loadVariantPreferences(componentVariants);\n    displayDialogue(editor);\n};\n\n/**\n * Display modal\n *\n * @param  {TinyMCE} editor\n */\nconst displayDialogue = async(editor) => {\n    const data = Object.assign({}, {});\n    const templateContext = await getTemplateContext(editor, data);\n    // Show modal with buttons.\n    const modal = await ModalFactory.create({\n        type: ElementsModal.TYPE,\n        templateContext: templateContext,\n        large: true,\n    });\n\n    // Choose class to modal.\n    const modalClass = previewElements ? 'elements-modal' : 'elements-modal-no-preview';\n\n    // Set class to modal.\n    editor.targetElm.closest('body').classList.add(modalClass);\n\n    modal.show();\n\n    // Event modal listener.\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        handleModalHidden(editor);\n    });\n\n    // Event listener for categories without flavors.\n    const soleCategories = modal.getRoot()[0].querySelectorAll('.elements-category.no-flavors');\n    soleCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryClick(event, modal);\n        });\n    });\n\n    // Event listener for categories with flavors.\n    const selectCategories = modal.getRoot()[0].querySelectorAll('.elements-category-flavor');\n    selectCategories.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleCategoryFlavorClick(event, modal);\n        });\n    });\n\n    // Event buttons listeners.\n    const buttons = modal.getRoot()[0].querySelectorAll('.elementst-dialog-button');\n    buttons.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleButtonClick(event, editor, modal);\n        });\n        if (previewElements) {\n            node.addEventListener('mouseenter', (event) => {\n                handleButtonMouseEvent(event, modal, true);\n            });\n            node.addEventListener('mouseleave', (event) => {\n                handleButtonMouseEvent(event, modal, false);\n            });\n        }\n    });\n\n    // Event variants listeners.\n    const variants = modal.getRoot()[0].querySelectorAll('.elements-button-variant');\n    variants.forEach(node => {\n        node.addEventListener('click', (event) => {\n            handleVariantClick(event, modal);\n        });\n    });\n\n    // Select first or saved category.\n    if (soleCategories.length > 0 || selectCategories.length > 0) {\n        let savedCategory = currentCategoryId;\n        if (soleCategories[0].displayorder > selectCategories[0].displayorder) {\n            selectCategories[0].click();\n        } else {\n            soleCategories[0].click();\n        }\n        if (savedCategory != 0) {\n            soleCategories.forEach((node) => {\n                if (node.dataset.categoryid == savedCategory) {\n                    node.click();\n                }\n            });\n            selectCategories.forEach((node) => {\n                if (node.dataset.categoryid == savedCategory) {\n                    // Simulate click on flavor.\n                    let target = modal.getRoot()[0].querySelector(\n                        '.elements-category-flavor[data-id=\"' + currentFlavorId + '\"]',\n                    );\n                    if (target) {\n                        let e = {target: target};\n                        handleCategoryFlavorClick(e, modal);\n                    }\n                }\n            });\n        }\n    }\n};\n\n/**\n * Handle a click within filter button.\n *\n * @param {MouseEvent} event The change event\n * @param {obj} modal\n */\nconst handleCategoryClick = (event, modal) => {\n    const link = event.target;\n    currentCategoryId = link.dataset.categoryid;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n\n    // Show/hide component buttons.\n    showCategoryButtons(modal, currentCategoryId);\n};\n\nconst handleCategoryFlavorClick = (event, modal) => {\n    const link = event.target;\n    currentFlavor = link.dataset.flavor;\n    currentFlavorId = link.dataset.id;\n    currentCategoryId = link.dataset.categoryid;\n    lastFlavor[currentCategoryId] = currentFlavorId;\n\n    // Remove active from all and set to selected.\n    const links = modal.getRoot()[0].querySelectorAll('.nav-link, .dropdown-item');\n    links.forEach(node => node.classList.remove('active'));\n    link.classList.add('active');\n    const category = modal.getRoot()[0].querySelector('.nav-link[data-categoryid=\"' + currentCategoryId + '\"]');\n    category.classList.add('active');\n\n    const componentButtons = modal.getRoot()[0].querySelectorAll('.elements-buttons-preview button');\n    componentButtons.forEach(componentButton => {\n        // Remove previous flavor.\n        if (componentButton.dataset.flavor != undefined) {\n            componentButton.classList.remove(componentButton.dataset.flavor);\n        }\n        componentButton.classList.add(currentFlavor);\n        componentButton.dataset.flavor = currentFlavor;\n        if (\n            (componentButton.dataset.flavorlist == '' || componentButton.dataset.flavorlist.split(',').includes(currentFlavor)) &&\n            componentButton.dataset.category == currentCategoryId\n        ) {\n            componentButton.classList.remove('elements-hidden');\n            if (componentButton.dataset.flavorlist != '') {\n                let variants = getVariantsClass(components[componentButton.dataset.id].name, currentFlavor);\n                let availableVariants = componentButton.querySelectorAll('.elements-button-variant');\n                availableVariants.forEach((variant) => {\n                    updateVariantButtonState(variant, variants.indexOf(variant.dataset.variantclass) != -1);\n                });\n            }\n        } else {\n            componentButton.classList.add('elements-hidden');\n        }\n    });\n\n};\n\n/**\n * Handle when closing the Modal.\n *\n * @param {obj} editor\n */\nconst handleModalHidden = (editor) => {\n    editor.targetElm.closest('body').classList.remove('elements-modal-no-preview');\n    if (currentCategoryId != 0 && currentFlavorId != 0) {\n        savePreferences([\n            {type: Preferences.category, value: currentCategoryId},\n            {type: Preferences.category_flavors, value: JSON.stringify(lastFlavor)},\n            {type: Preferences.component_variants, value: JSON.stringify(getVariantPreferences())}\n        ]);\n    }\n};\n\nconst updateComponentCode = (componentCode, selectedButton, placeholder, flavor = '') => {\n    componentCode = componentCode.replace('{{PLACEHOLDER}}', placeholder);\n\n    // Return active variants for current component.\n    const variants = getVariantsClass(components[selectedButton].name, flavor);\n\n    // Apply variants to html component.\n    if (variants.length > 0) {\n        componentCode = componentCode.replace('{{VARIANTS}}', variants.join(' '));\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', getVariantsHtml(components[selectedButton].name));\n    } else {\n        componentCode = componentCode.replace('{{VARIANTS}}', '');\n        componentCode = componentCode.replace('{{VARIANTSHTML}}', '');\n    }\n\n    if (currentFlavor) {\n        componentCode = componentCode.replace('{{FLAVOR}}', currentFlavor);\n    } else {\n        componentCode = componentCode.replace('{{FLAVOR}}', '');\n    }\n\n    componentCode = componentCode.replace('{{COMPONENT}}', components[selectedButton].name);\n    componentCode = componentCode.replace('{{CATEGORY}}', categories[currentCategoryId].name);\n\n    // Apply random IDs.\n    componentCode = applyRandomID(componentCode);\n\n    // Apply lang strings.\n    componentCode = applyLangStrings(componentCode);\n\n    return componentCode;\n};\n\n/**\n * Handle a click in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} editor\n * @param {obj} modal\n */\nconst handleButtonClick = async(event, editor, modal) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n\n    // Component button.\n    if (components[selectedButton]) {\n        const sel = editor.selection.getContent();\n        let componentCode = components[selectedButton].code;\n        const placeholder = (sel.length > 0 ? sel : components[selectedButton].text);\n\n        let flavor = components[selectedButton].flavors.length > 0 ? currentFlavor : '';\n\n        // Create a new node to replace the placeholder.\n        const randomId = generateRandomID();\n        const newNode = document.createElement('span');\n        newNode.dataset.id = randomId;\n        newNode.innerHTML = placeholder;\n        componentCode = updateComponentCode(componentCode, selectedButton, newNode.outerHTML, flavor);\n        // Sets new content.\n        editor.selection.setContent(componentCode);\n\n        // Select text.\n        const nodeSel = editor.dom.select('span[data-id=\"' + randomId + '\"]');\n        if (nodeSel?.[0]) {\n            editor.selection.select(nodeSel[0]);\n        }\n\n        modal.destroy();\n        editor.focus();\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a component button.\n *\n * @param {MouseEvent} event The click event\n * @param {obj} modal\n * @param {bool} show\n */\nconst handleButtonMouseEvent = (event, modal, show) => {\n    const selectedButton = event.target.closest('button').dataset.id;\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + selectedButton + '\"]');\n    const previewDefault = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-default\"]');\n    let flavor = components[selectedButton].flavors.length > 0 ? currentFlavor : '';\n\n    node.innerHTML = updateComponentCode(components[selectedButton].code, selectedButton, components[selectedButton].text, flavor);\n\n    if (node) {\n        if (show) {\n            previewDefault.classList.toggle('elements-hidden');\n            node.classList.toggle('elements-hidden');\n        } else {\n            node.classList.toggle('elements-hidden');\n            previewDefault.classList.toggle('elements-hidden');\n        }\n    }\n};\n\n/**\n * Handle a mouse events mouseenter/mouseleave in a variant button.\n * Not used at the moment.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n * @param {bool} show\n */\n// eslint-disable-next-line no-unused-vars\nconst handleVariantMouseEvent = (event, modal, show) => {\n    const variant = event.target.closest('span');\n    const variantEnabled = variant.dataset.state == 'on';\n    const button = event.target.closest('button');\n\n    if (!variantEnabled) {\n        updateVariantComponentState(variant, button, modal, show, false);\n    }\n};\n\n\n/**\n * Handle a mouse event within the variant buttons.\n *\n * @param {MouseEvent} event The mouseenter/mouseleave event\n * @param {obj} modal\n */\nconst handleVariantClick = (event, modal) => {\n    event.stopPropagation();\n    const variant = event.target.closest('span');\n    const button = event.target.closest('button');\n    const flavor = components[button.dataset.id].flavors.length > 0 ? currentFlavor : '';\n\n    updateVariantComponentState(variant, button, modal, false, true);\n\n    const node = modal.getRoot()[0].querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"]');\n    node.innerHTML = updateComponentCode(\n        components[button.dataset.id].code,\n        button.dataset.id,\n        components[button.dataset.id].text,\n        flavor\n    );\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = async(editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n        buttons: await getButtons(editor),\n        categories: await getCategories(),\n        preview: previewElements,\n    }, data);\n};\n\n/**\n * Get the Elements categories for the dialogue.\n *\n * @returns {object} data\n */\nconst getCategories = async() => {\n    const cats = [];\n    // Iterate over contexts.\n    categories.forEach((category) => {\n        let categoryFlavors = getCategoryFlavors(category.id);\n        let hasFlavors = hasCategoryFlavors(categoryFlavors);\n         cats.push({\n            categoryid: category.id,\n            name: category.displayname,\n            type: category.id,\n            displayorder: category.displayorder,\n            flavors: categoryFlavors,\n            hasFlavors: hasFlavors,\n            active: '',\n        });\n    });\n    // Sort by displayorder and set first to active.\n    cats.sort((a, b) => a.displayorder - b.displayorder);\n    if (cats.length > 0) {\n        cats[0].active = 'active';\n        if (cats[0].flavors.length > 0) {\n            cats[0].flavors[0].factive = 'active';\n        }\n    }\n\n    return cats;\n};\n\nconst getComponentVariants = (component) => {\n    const componentVariants = [];\n    component.variants.forEach(variant => {\n        let variantitem = findByName(variants, variant);\n        if (variantitem !== undefined) {\n            let state = variantExists(component.name, variantitem.name) ? 'on' : 'off';\n            componentVariants.push({\n                id: variantitem.id,\n                name: variantitem.name,\n                state: state,\n                imageClass: variantitem.name + '-variant-' + state,\n                variantclass: (variantitem.c4lcompatibility ? 'c4l' : 'elements') + '-' + variantitem.name + '-variant',\n                title: langStrings.get(variantitem.name),\n                content: variantitem.content,\n            });\n        }\n    });\n    return componentVariants;\n};\n\nconst getCategoryFlavors = (categoryId) => {\n    const categoryFlavors = [];\n    flavors.forEach(flavor => {\n        if (flavor.categories == categoryId || flavor.categories.split(',').includes(categoryId)) {\n            categoryFlavors.push({\n                id: flavor.id,\n                name: flavor.name,\n                displayname: flavor.displayname,\n            });\n        }\n    });\n    return categoryFlavors;\n};\n\nconst hasCategoryFlavors = (value) => {\n    return Array.isArray(value) && value.length;\n};\n\n/**\n * Get the Elements buttons for the dialogue.\n *\n * @param {Editor} editor\n * @returns {object} buttons\n */\nconst getButtons = async(editor) => {\n    const buttons = [];\n    // Not used at the moment.\n    // eslint-disable-next-line no-unused-vars\n    const sel = editor.selection.getContent();\n    Object.values(components).forEach(component => {\n        buttons.push({\n            id: component.id,\n            name: component.displayname,\n            type: component.compcat,\n            imageClass: 'elements-' + component.name + '-icon',\n            htmlcode: component.code,\n            variants: getComponentVariants(component, variants),\n            flavorlist: component.flavors.join(','),\n            category: component.compcat,\n        });\n    });\n    buttons.sort((a, b) => a.displayorder - b.displayorder);\n\n    return buttons;\n};\n\nconst getElementsData = async() => {\n    const data = await fetchMany([{\n        methodname: 'tiny_elements_get_elements_data',\n        args: {\n            isstudent: userStudent,\n            contextid: contextid\n        },\n    }])[0];\n\n    // TODO error handling.\n    const indexedComponents = [];\n    data.components.forEach(component => {\n        indexedComponents[component.id] = component;\n    });\n\n    const indexedVariants = [];\n    data.variants.forEach(variant => {\n        indexedVariants[variant.id] = variant;\n    });\n\n    const indexedCategories = [];\n    data.categories.forEach(category => {\n        indexedCategories[category.id] = category;\n    });\n\n    return {\n        components: indexedComponents,\n        variants: indexedVariants,\n        categories: indexedCategories,\n        flavors: data.flavors,\n    };\n};\n\n/**\n * Get variants for the dialogue.\n * Not used at the moment.\n *\n * @param  {string} component\n * @param  {object} elements\n * @return {object} Variants for a component\n */\n// eslint-disable-next-line no-unused-vars\nconst getVariantsState = (component, elements) => {\n    const variants = [];\n    let variantState = '';\n    let variantClass = '';\n\n    // Max 3 variants.\n    if (elements.length > 3) {\n        elements = elements.slice(0, 2);\n    }\n\n    elements.forEach((variant, index) => {\n        if (variantExists(component, variant)) {\n            variantState = 'on';\n            variantClass = 'on ';\n        } else {\n            variantState = 'off';\n            variantClass = '';\n        }\n        variantClass += variant + '-variant-' + variantState;\n        variants.push({\n            id: index,\n            name: variant,\n            state: variantState,\n            imageClass: variantClass,\n            title: langStrings.get(variant),\n        });\n    });\n\n    return variants;\n};\n\n/**\n * Update a variant component UI.\n *\n * @param {obj} variant\n * @param {obj} button\n * @param {obj} modal\n * @param {bool} show\n * @param {bool} updateHtml\n */\nconst updateVariantComponentState = (variant, button, modal, show, updateHtml) => {\n    const selectedVariant = variant.dataset.variantclass;\n    const selectedButton = button.dataset.id;\n    const componentClass = button.dataset.classcomponent;\n    const previewComponent = modal.getRoot()[0]\n        .querySelector('div[data-id=\"code-preview-' + button.dataset.id + '\"] .' + componentClass);\n    const variantPreview = modal.getRoot()[0]\n        .querySelector('span[data-id=\"variantHTML-' + button.dataset.id + '\"]');\n    let variantsHtml = '';\n    let hasflavors = components[selectedButton].flavors.length > 0;\n\n    if (previewComponent) {\n        if (updateHtml) {\n            if (variant.dataset.state == 'on') {\n                removeVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, false);\n                previewComponent.classList.remove(selectedVariant);\n            } else {\n                addVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n                updateVariantButtonState(variant, true);\n                previewComponent.classList.add(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = getVariantsHtml(components[selectedButton].name);\n            }\n        } else {\n            variantsHtml = getVariantsHtml(components[selectedButton].name);\n            if (show) {\n                previewComponent.classList.add(selectedVariant);\n                variantsHtml += getVariantHtml(variant.dataset.variant);\n            } else {\n                previewComponent.classList.remove(selectedVariant);\n            }\n\n            // Update variant preview HTML.\n            if (variantPreview) {\n                variantPreview.innerHTML = variantsHtml;\n            }\n        }\n    } else {\n        // Update variants preferences.\n        if (variant.dataset.state == 'on') {\n            removeVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, false);\n        } else {\n            addVariant(components[selectedButton].name, variant.dataset.variant, hasflavors ? currentFlavor : '');\n            updateVariantButtonState(variant, true);\n        }\n    }\n};\n\n/**\n * Update a variant button UI.\n *\n * @param {obj} variant\n * @param {bool} activate\n */\nconst updateVariantButtonState = (variant, activate) => {\n    if (activate) {\n        variant.dataset.state = 'on';\n        variant.classList.remove(variant.dataset.variant + '-variant-off');\n        variant.classList.add(variant.dataset.variant + '-variant-on');\n        variant.classList.add('on');\n    } else {\n        variant.dataset.state = 'off';\n        variant.classList.remove(variant.dataset.variant + '-variant-on');\n        variant.classList.add(variant.dataset.variant + '-variant-off');\n        variant.classList.remove('on');\n    }\n};\n\n/**\n * Show/hide buttons depend on selected context.\n *\n * @param  {object} modal\n * @param  {String} context\n */\nconst showCategoryButtons = (modal, context) => {\n    const showNodes = modal.getRoot()[0].querySelectorAll('button[data-type=\"' + context + '\"]');\n    const hideNodes = modal.getRoot()[0].querySelectorAll('button[data-type]:not([data-type=\"' + context + '\"])');\n\n    showNodes.forEach(node => node.classList.remove('elements-hidden'));\n    hideNodes.forEach(node => node.classList.add('elements-hidden'));\n};\n\n/**\n * Replace all localized strings.\n *\n * @param  {String} text\n * @return {String} String with lang tags replaced with a localized string.\n */\nconst applyLangStrings = (text) => {\n    const compRegex = /{{#([^}]*)}}/g;\n\n    [...text.matchAll(compRegex)].forEach(strLang => {\n        text = text.replace('{{#' + strLang[1] + '}}', langStrings.get(strLang[1]));\n    });\n\n    return text;\n};\n\n/**\n * Generates a random string.\n * @return {string} A random string\n */\nconst generateRandomID = () => {\n    const timestamp = new Date().getTime();\n    return 'R' + Math.round(Math.random() * 100000) + '-' + timestamp;\n};\n\n/**\n * Replace all ID tags with a random string.\n * @param  {String} text\n * @return {String} String with all ID tags replaced with a random string.\n */\nconst applyRandomID = (text) => {\n    const compRegex = /{{@ID}}/g;\n\n    if (text.match(compRegex)) {\n        text = text.replace(compRegex, generateRandomID());\n    }\n\n    return text;\n};\n\n/**\n * Get language strings.\n *\n * @return {object} Language strings\n */\nconst getAllStrings = async() => {\n    const keys = [];\n    const compRegex = /{{#([^}]*)}}/g;\n\n    components.forEach(element => {\n        // Get lang strings from components.\n        [...element.code.matchAll(compRegex)].forEach(strLang => {\n            if (keys.indexOf(strLang[1]) === -1) {\n                keys.push(strLang[1]);\n            }\n        });\n\n        // Get lang strings from text placeholders.\n        [...element.text.matchAll(compRegex)].forEach(strLang => {\n            if (keys.indexOf(strLang[1]) === -1) {\n                keys.push(strLang[1]);\n            }\n        });\n    });\n\n    const stringValues = await getStrings(keys.map((key) => ({key, component})));\n    return new Map(keys.map((key, index) => ([key, stringValues[index]])));\n};\n"],"names":["userStudent","previewElements","components","categories","flavors","variants","langStrings","contextid","currentFlavor","currentFlavorId","currentCategoryId","lastFlavor","async","editor","data","getElementsData","getAllStrings","Preferences","category","category_flavors","componentVariants","component_variants","displayDialogue","Object","assign","templateContext","getTemplateContext","modal","ModalFactory","create","type","ElementsModal","TYPE","large","modalClass","targetElm","closest","classList","add","show","getRoot","on","ModalEvents","hidden","handleModalHidden","soleCategories","querySelectorAll","forEach","node","addEventListener","event","handleCategoryClick","selectCategories","handleCategoryFlavorClick","handleButtonClick","handleButtonMouseEvent","handleVariantClick","length","savedCategory","displayorder","click","dataset","categoryid","target","querySelector","link","remove","showCategoryButtons","flavor","id","componentButton","undefined","flavorlist","split","includes","name","variant","updateVariantButtonState","indexOf","variantclass","value","JSON","stringify","updateComponentCode","componentCode","selectedButton","placeholder","replace","join","applyRandomID","applyLangStrings","sel","selection","getContent","code","text","randomId","generateRandomID","newNode","document","createElement","innerHTML","outerHTML","setContent","nodeSel","dom","select","destroy","focus","previewDefault","toggle","stopPropagation","button","updateVariantComponentState","elementid","buttons","getButtons","getCategories","preview","cats","categoryFlavors","getCategoryFlavors","hasFlavors","hasCategoryFlavors","push","displayname","active","sort","a","b","factive","getComponentVariants","component","variantitem","state","imageClass","c4lcompatibility","title","get","content","categoryId","Array","isArray","values","compcat","htmlcode","methodname","args","isstudent","indexedComponents","indexedVariants","indexedCategories","updateHtml","selectedVariant","componentClass","classcomponent","previewComponent","variantPreview","variantsHtml","hasflavors","activate","context","showNodes","hideNodes","matchAll","strLang","timestamp","Date","getTime","Math","round","random","compRegex","match","keys","element","stringValues","map","key","Map","index"],"mappings":"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"}